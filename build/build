#!/usr/bin/env bash

if echo "$*" | grep -q -- '--help'
then
  echo "
  Usage
    $0 [platform = this 
      [--no-build-release]
      [--no-build-debug]
      [--no-build-test]
      [--no-run-test]
    ]

  Arguments
    platform:             this*, android, ios, windows, linux, macos

  Options
    --no-build-release:   skip fully optimized builds
    --no-build-debug:     skip builds with sanitizers and debug symbols
    --no-build-test:      skip builds with sanitizers, benchmarks and unit tests
    --no-run-test:        skip running the benchmarks and unit tests

  Summary
    Build the Watcher.
    This file is a collection of shorthands for CMake invocations.
    It also does some housekeeping, such as linking the generated 
    compilation database to the root of this project.
"
  exit 0
fi

LAST_DIR="$PWD"
cd "$(dirname "$0")" \
  || return $?
THIS_DIR="$PWD"

PLATFORM="$1"

# @note build/build/san/address
# I'm not ready to give up on my trusty asan yet, but I'm close.
# LLVM's asan on Linux is plaguing me with this bug:
# https://github.com/google/sanitizers/issues/1010
# Avoiding that bug is why 'watcher/adapter/linux/watch.hpp' is
# composed almost entirely of nested closures. Asan is OK with that.
SANITIZERS=(
  'nosan'
  'asan'
  'tsan'
  'ubsan'
  'msan'
  # Commented sanitizers do not reliably work yet.
  # @todo Continue checking. Always.
  # 'stacksan'
  # 'dataflowsan' 
  # 'kcfisan'
  # 'cfisan'
)

TESTS=(
  'test_regular_file_events'
  'test_directory_events'
)

# The `build::build` function will append to this list
# whenever it produces an artifact.
ARTIFACTS=()

test -n "$PLATFORM" \
  || PLATFORM='this'
test -n "$SOURCE_VARIANT" \
  || SOURCE_VARIANT='full'

OUT_DIR="$PWD/out"
OUT_PLATFORM_DIR="$OUT_DIR/$PLATFORM"

build::init::cc() {
  if uname | grep -qE '(Darwin)|(Linux)'
  then
    local EC;
    local WTR_LLVM_VERSION=15
    local WTR_LLVM_DIR="$THIS_DIR/../../../tool/compiler/llvm"
    
    CC="$(which clang)"
    CXX="$(which clang++)"
    
    if test -n "$CC" -a -n "$CXX"
    then
      EC=0
    elif test -d "$WTR_LLVM_DIR"
    then
      if ! test -x "$WTR_LLVM_DIR/build/out/$WTR_LLVM_VERSION/bin/clang"
      then
        "$WTR_LLVM_DIR/tool/version/set" $WTR_LLVM_VERSION
        "$WTR_LLVM_DIR/build/build"
        EC=$?
      fi
      CC="$WTR_LLVM_DIR/build/out/$WTR_LLVM_VERSION/bin/clang"
      CXX="$WTR_LLVM_DIR/build/out/$WTR_LLVM_VERSION/bin/clang++"
    fi
    
    export CC
    export CXX
    
    return $EC
  fi
}

build::compdb() {
  compdb_path="$OUT_PLATFORM_DIR/release/compile_commands.json"
  if test "$SOURCE_VARIANT" != 'tiny' \
    && test -f "$compdb_path"
  then
    local FROM="$compdb_path"
    local TO='../compile_commands.json'

    ln -sf "$FROM" "$TO"

    return $?
  else
    return 0
  fi
}

build::get_cmake_system_name_opt_for_platform() {
  if test -n "$1"
  then
    case "$(echo $1 | tr '[:upper:]' '[:lower:]')" in
      macos)   echo "-DCMAKE_SYSTEM_NAME='macOS'";        return;;
      windows) echo "-DCMAKE_SYSTEM_NAME='WindowsStore'"; return;;
      linux)   echo "-DCMAKE_SYSTEM_NAME='Linux'";        return;;
      android) echo "-DCMAKE_SYSTEM_NAME='Android'";      return;;
      ios)     echo "-DCMAKE_SYSTEM_NAME='iOS'";          return;;
      *)       echo -n '';                                return;;
    esac
  fi
}

build::get_cmake_generator_opt_for_platform() {
  if test -n "$1"
  then
    # we need to use `tr` here because the bash on
    # some github runners reject the ${var,,} syntax
    case "$(echo $1 | tr '[:upper:]' '[:lower:]')" in
      # We use Make for now because we want this
      # to run in github actions without dependencies.
      macos)   echo "-G 'Xcode'";          return;;
      windows) echo "-G 'Unix Makefiles'"; return;;
      linux)   echo "-G 'Unix Makefiles'"; return;;
      android) echo "-G 'Unix Makefiles'"; return;;
      ios)     echo "-G 'Xcode'";          return;;
      *)       echo "-G 'Unix Makefiles'"; return;;
    esac
  else
    echo "-G 'Unix Makefiles'"
  fi
}

build::get_cmake_extra_for_platform() {
  if test -n "$1"
  then
    case "$(echo $1 | tr '[:upper:]' '[:lower:]')" in
      android)
        echo "-DCMAKE_ANDROID_NDK='$ANDROID_NDK_HOME'"
        return;;
    esac
  fi
}

build::get_config_name_for_build_type() {
  if test -n "$1"
  then
    case "$(echo $1 | tr '[:upper:]' '[:lower:]')" in
      release) echo 'Release'; return;;
      debug)   echo 'Debug';   return;;
      *)       echo 'Debug';   return;;
    esac
  else
    echo 'Debug'
  fi
}

build::check::sanitizer_allowed_for::macos() {
  denylist=(
    'msan'
  )

  if [[ "${denylist[*]}" =~ "$1" ]]
  then return 1
  else return 0
  fi
}

build::check::sanitizer_allowed_for::windows() {
  return 0
}

build::check::sanitizer_allowed_for::linux() {
  denylist=(
    'asan'
  )

  if [[ "${denylist[*]}" =~ "$1" ]]
  then return 1
  else return 0
  fi
}

build::check::sanitizer_allowed_for::android() {
  return 0
}

build::check::sanitizer_allowed_for::ios() {
  denylist=(
    'msan'
  )

  if [[ "${denylist[*]}" =~ "$1" ]]
  then return 1
  else return 0
  fi
}

build::check::sanitizer_allowed_for::this() {
  sanitizer_query="$1"

  discerned_platform_raw="$(uname | tr '[:upper:]' '[:lower:]')"
  if test $discerned_platform_raw = 'darwin'
  then
    discerned_platform='macos'
  else
    discerned_platform="$discerned_platform_raw"
  fi

  build::check::sanitizer_allowed_for::$discerned_platform "$sanitizer_query"
  return $?
}

build::build() {
  local ok=0
  if ! echo "$*" | grep -q -- --no-build-release
  then
    this_out_dir="$OUT_PLATFORM_DIR/release"
    this_artifact="$OUT_PLATFORM_DIR/release/wtr.watcher"

    mkdir -p "$this_out_dir"

    # shellcheck disable=2116,2155
    local cmake_config_command=$(echo " \
      cmake \
        -S '$PWD/in' \
        -B '$this_out_dir' \
        $(build::get_cmake_generator_opt_for_platform $PLATFORM) \
        $(build::get_cmake_system_name_opt_for_platform $PLATFORM) \
        $(build::get_cmake_extra_for_platform $PLATFORM) \
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON")

    # echo "$cmake_config_command"

    eval "$cmake_config_command"
    ok=$((ok + $?))

    cmake \
      --build "$this_out_dir" \
      --config Release \
      -j8 \
      && ARTIFACTS+=("$this_artifact")
    ok=$((ok + $?))
  fi

  if ! echo "$*" | grep -q -- --no-build-debug
  then
    for S in "${SANITIZERS[@]}"
    do
      if build::check::sanitizer_allowed_for::$PLATFORM "$S"
      then
        this_out_dir="$OUT_PLATFORM_DIR/debug/$S"
        this_artifact="$OUT_PLATFORM_DIR/debug/$S/wtr.watcher"

        mkdir -p "$this_out_dir"

        # we need to use `tr` here because the bash on
        # some github runners reject the ${var^^} syntax

        # shellcheck disable=2116,2155
        local cmake_config_command=$(echo " \
          cmake \
            -S '$PWD/in' \
            -B '$this_out_dir' \
            $(build::get_cmake_generator_opt_for_platform $PLATFORM) \
            $(build::get_cmake_system_name_opt_for_platform $PLATFORM) \
            $(build::get_cmake_extra_for_platform $PLATFORM) \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DWTR_WATCHER_USE_$(echo $S | tr '[:lower:]' '[:upper:]')=ON")

        # echo "$cmake_config_command"

        eval "$cmake_config_command"
        ok=$((ok + $?))

        cmake \
          --build "$this_out_dir" \
          --config Debug \
          -j8 \
          && ARTIFACTS+=("$this_artifact")
        ok=$((ok + $?))
      fi
    done
  fi

  if ! echo "$*" | grep -q -- --no-build-test
  then
    for S in "${SANITIZERS[@]}"
    do
      if build::check::sanitizer_allowed_for::$PLATFORM "$S"
      then
        this_out_dir="$OUT_PLATFORM_DIR/test/$S"

        mkdir -p "$this_out_dir"

        # we need to use `tr` here because the bash on
        # some github runners reject the ${var^^} syntax

        # shellcheck disable=2116,2155
        local cmake_config_command=$(echo " \
          cmake \
            -S '$PWD/in' \
            -B '$this_out_dir' \
            $(build::get_cmake_generator_opt_for_platform $PLATFORM) \
            $(build::get_cmake_system_name_opt_for_platform $PLATFORM) \
            $(build::get_cmake_extra_for_platform $PLATFORM) \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DWTR_WATCHER_USE_$(echo $S | tr '[:lower:]' '[:upper:]')=ON \
            -DWTR_WATCHER_USE_TEST=ON")

        # echo "$cmake_config_command"

        eval "$cmake_config_command"
        ok=$((ok + $?))

        for TEST in "${TESTS[@]}"
        do
          this_artifact="$OUT_PLATFORM_DIR/debug/$S/$TEST.wtr.watcher"
          cmake \
            --build "$this_out_dir" \
            --config Debug \
            -j8 \
            --target "$TEST.wtr.watcher" \
            && ARTIFACTS+=("$this_artifact")
          ok=$((ok + $?))
        done
      fi
    done
  fi

  return $ok
}

build::run::test() {
  if ! echo "$*" | grep -q -- --no-run-test
  then
    for TEST in "${TESTS[@]}"
    do
      while read TEST_PATH
      do
        test -d tmp_test_watcher && \
          rm -rf tmp_test_watcher
        test -x "$TEST_PATH" && \
          "$TEST_PATH"
      done <<< "$(find . -name "$TEST.wtr.watcher" -type f)"
    done
  fi
}

build::show::artifacts() {
  echo 'artifacts:'

  for a in ${ARTIFACTS[@]}; do
  echo " - $a"; done
}

build::write::current_artifacts() {
  this_out_dir="$OUT_DIR/artifacts.txt"

  test -e "$this_out_dir" \
    && rm -rf "$this_out_dir"

  for a in ${ARTIFACTS[@]}; do
  echo "$a" >> "$this_out_dir"; done
}

build::init::cc \
  && build::build "$@" \
  && build::run::test "$@" \
  && build::show::artifacts \
  && build::write::current_artifacts

EC=$?

# @TODO undo this
EC=0

cd "$LAST_DIR" \
  || exit 1
exit $EC
