#!/usr/bin/env bash

LAST_DIR="$PWD"
cd "$(dirname "$0")" \
  || return $?
THIS_DIR="$PWD"

PLATFORM="$1"
BUILD_TYPE="$2"
SOURCE_VARIANT="$3"
OUT_DIR="$PWD/out/$BUILD_TYPE/$PLATFORM"

test -n "$PLATFORM" \
  || PLATFORM='this'
test -n "$BUILD_TYPE" \
  || BUILD_TYPE='Release'
test -n "$SOURCE_VARIANT" \
  || SOURCE_VARIANT='full'

build::init::cc() {
  local EC;
  local WTR_LLVM_VERSION=15
  local WTR_LLVM_DIR="$THIS_DIR/../../../tool/compiler/llvm"
  if test -n "$CC" -a -n "$CXX"
  then
    EC=0
  elif test -d "$WTR_LLVM_DIR"
  then
    if ! test -x "$WTR_LLVM_DIR/build/out/$WTR_LLVM_VERSION/bin/clang"
    then
      "$WTR_LLVM_DIR/tool/version/set" $WTR_LLVM_VERSION
      "$WTR_LLVM_DIR/build/build"
      EC=$?
    fi
    CC="$WTR_LLVM_DIR/build/out/$WTR_LLVM_VERSION/bin/clang"
    CXX="$WTR_LLVM_DIR/build/out/$WTR_LLVM_VERSION/bin/clang++"
  else
    CC="$(which clang)"
    CXX="$(which clang++)"
  fi
  export CC
  export CXX
  return $EC
}

build::compdb() {
  if test "$SOURCE_VARIANT" != 'tiny'
  then
    local FROM="$OUT_DIR/compile_commands.json"
    local TO='../'
    ln -sf "$FROM" "$TO"
    return $?
  else
    return 0
  fi
}

# Builds the "full" project for whatever platform *this* is.
build::build::this::full() {
  mkdir -p "$OUT_DIR"
  cmake -Wno-dev -S 'in' -B "$OUT_DIR" -G 'Ninja' \
    -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
    && cmake --build "$OUT_DIR" --config "$BUILD_TYPE"
  return $?
}

# Builds the "tiny" project for whatever platform *this* is.
build::build::this::tiny() {
  mkdir -p "$OUT_DIR"
  EXTRAS="$(\
    test "$(uname)" = Darwin \
      && echo '-isysroot
        /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
        -framework CoreFoundation
        -framework CoreServices')"
  eval c++ -std=c++2a -O3 ../src/tiny-main.cpp -o $OUT_DIR/water.watcher.tiny $EXTRAS
  return $?
}

build::build::android::full() {
  mkdir -p "$OUT_DIR"
  cmake -Wno-dev -S 'in' -B "$OUT_DIR" -G 'Ninja' \
    -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
    -DCMAKE_ANDROID_NDK="$ANDROID_NDK_HOME" \
    -DCMAKE_SYSTEM_NAME='Android' \
      && cmake --build "$OUT_DIR" --config "$BUILD_TYPE"
  return $?
}

# Builds the "tiny" project for Android
build::build::android::tiny() {
  mkdir -p "$OUT_DIR"
  echo 'No "Tiny" builds for Android just yet.'
  return $?
}

# Builds the "full" project for iOS
build::build::ios::full() {
  mkdir -p "$OUT_DIR"
  cmake -S 'in' -B "$OUT_DIR" -G 'Xcode' -DCMAKE_SYSTEM_NAME='iOS' \
    && cmake --build "$OUT_DIR" --config "$BUILD_TYPE"
  return $?
}

# Builds the "tiny" project for iOS
build::build::ios::tiny() {
  mkdir -p "$OUT_DIR"
  echo 'No "Tiny" builds for iOS just yet.'
  return $?
}

if echo "$*" | grep -q -- '--help'
then
  echo 'Usage'
  echo "  $0 [ platform = this ] [ build type = Release ] [ source variant = full ]"
  echo
  echo '  platform:       this, android, ios'
  echo '  build type:     Release, RelWithDebInfo, Debug'
  echo '  source variant: full, tiny'
  echo
  echo 'Summary'
  echo '  Build the Watcher.'
  echo '  This file is a collection of shorthands for CMake invocations.'
  echo '  It also does some housekeeping, such as linking the generated '
  echo '  compilation database to the root of this project.'
  exit 0
fi

build::init::cc \
  && build::build::$PLATFORM::$SOURCE_VARIANT \
  && build::compdb

EC=$?
cd "$LAST_DIR" \
  || exit $?
exit $EC

