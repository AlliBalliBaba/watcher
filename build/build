#!/usr/bin/env bash

build::build() {
  local ok;
  local lastdir="$PWD"
  cd "$(dirname "$0")"
  local thisdir="$PWD"
  local llvm_version=15

  cc::init() {
    local ok;
    local llvm_dir="$thisdir/../../../tool/compiler/llvm"
    if test -n "$CC" -a -n "$CXX"
    then
      ok=0
    elif test -d "$llvm_dir"
    then
      if ! test -x "$llvm_dir/build/out/$llvm_version/bin/clang"
      then
        "$llvm_dir/tool/version/set" $llvm_version
        "$llvm_dir/build/build"
        ok=$?
      fi
      export CC="$llvm_dir/build/out/$llvm_version/bin/clang"
      export CXX="$llvm_dir/build/out/$llvm_version/bin/clang++"
    else
      export CC="$(which clang)"
      export CXX="$(which clang++)"
    fi
    return $ok
  }

  cmake::build() {
    if test "$1" != 'tiny'
    then
      cmake \
        -S 'in' \
        -B 'out' \
        -Wno-dev \
        -G 'Ninja' \
        -DCMAKE_BUILD_TYPE=$1 \
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
        && cmake \
          --build out \
          --config $1
      return $?
    else
      PLATFORM_EXTRAS="$(\
        test "$(uname)" = Darwin \
          && echo '-isysroot
            /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
            -framework CoreFoundation
            -framework CoreServices')"
      eval c++ -std=c++2a -O3 ../src/tiny-main.cpp -o out/water.watcher.tiny $PLATFORM_EXTRAS
    fi
  }

  compdb::ln() {
    if test "$TYPE" != 'tiny'
    then
      local from="$PWD/out/compile_commands.json"
      local to='../'
      ln -sf "$from" "$to"
      return $?
    fi
  }

  if test -z "$1"
  then
    TYPE=RelWithDebInfo
  else
    TYPE="$1"
  fi

  cc::init \
    && cmake::build $TYPE \
    && compdb::ln

  ok=$?

  cd "$lastdir"
  return $ok
}

build::build $@

exit $?
