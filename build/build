#!/usr/bin/env bash

if echo "$*" | grep -q -- '--help'
then
  echo 'Usage'
  echo "  $0 [platform = this] [--no-release] [--no-debug]"
  echo
  echo '  platform:       this*, android, ios, windows, linux, macos'
  echo '  --no-release:   skip fully optimized builds'
  echo '  --no-debug:     skip builds with sanitizers and debug symbols'
  echo
  echo 'Summary'
  echo '  Build the Watcher.'
  echo '  This file is a collection of shorthands for CMake invocations.'
  echo '  It also does some housekeeping, such as linking the generated '
  echo '  compilation database to the root of this project.'
  exit 0
fi

LAST_DIR="$PWD"
cd "$(dirname "$0")" \
  || return $?
THIS_DIR="$PWD"

PLATFORM="$1"

# Commented options do not reliably build yet
SANITIZERS=(
  'nosan'
  'asan'
  'msan'
  'tsan'
  'ubsan'
  'stacksan'
  # 'dataflowsan' 
  # 'kcfisan'
  'cfisan'
)

test -n "$PLATFORM" \
  || PLATFORM='this'
test -n "$BUILD_TYPE" \
  || BUILD_TYPE='Release'
test -n "$SOURCE_VARIANT" \
  || SOURCE_VARIANT='full'

OUT_DIR="$PWD/out/$PLATFORM"

build::init::cc() {
  local EC;
  local WTR_LLVM_VERSION=15
  local WTR_LLVM_DIR="$THIS_DIR/../../../tool/compiler/llvm"
  if test -n "$CC" -a -n "$CXX"
  then
    EC=0
  elif test -d "$WTR_LLVM_DIR"
  then
    if ! test -x "$WTR_LLVM_DIR/build/out/$WTR_LLVM_VERSION/bin/clang"
    then
      "$WTR_LLVM_DIR/tool/version/set" $WTR_LLVM_VERSION
      "$WTR_LLVM_DIR/build/build"
      EC=$?
    fi
    CC="$WTR_LLVM_DIR/build/out/$WTR_LLVM_VERSION/bin/clang"
    CXX="$WTR_LLVM_DIR/build/out/$WTR_LLVM_VERSION/bin/clang++"
  else
    CC="$(which clang)"
    CXX="$(which clang++)"
  fi
  export CC
  export CXX
  return $EC
}

build::compdb() {
  if test "$SOURCE_VARIANT" != 'tiny'
  then
    local FROM="$OUT_DIR/compile_commands.json"
    local TO='../'
    ln -sf "$FROM" "$TO"
    return $?
  else
    return 0
  fi
}

build::get_cmake_system_name_opt_for_platform() {
  if test -n "$1"
  then
    case "$(echo $1 | tr '[:upper:]' '[:lower:]')" in
      macos)   echo "-DCMAKE_SYSTEM_NAME='macOS'";        return;;
      windows) echo "-DCMAKE_SYSTEM_NAME='WindowsStore'"; return;;
      linux)   echo "-DCMAKE_SYSTEM_NAME='Linux'";        return;;
      android) echo "-DCMAKE_SYSTEM_NAME='Android'";      return;;
      ios)     echo "-DCMAKE_SYSTEM_NAME='iOS'";          return;;
      *)       echo -n '';                                return;;
    esac
  fi
}

build::get_cmake_generator_opt_for_platform() {
  if test -n "$1"
  then
    # we need to use `tr` here because the bash on
    # some github runners reject the ${var,,} syntax
    case "$(echo $1 | tr '[:upper:]' '[:lower:]')" in
      # We use Make for now because we want this
      # to run in github actions without dependencies.
      macos)   echo "-G 'Xcode'";          return;;
      windows) echo "-G 'Unix Makefiles'"; return;;
      linux)   echo "-G 'Unix Makefiles'"; return;;
      android) echo "-G 'Unix Makefiles'"; return;;
      ios)     echo "-G 'Xcode'";          return;;
      *)       echo "-G 'Unix Makefiles'"; return;;
    esac
  else
    echo "-G 'Unix Makefiles'"
  fi
}

build::get_config_name_for_build_type() {
  if test -n "$1"
  then
    case "$(echo $1 | tr '[:upper:]' '[:lower:]')" in
      release) echo 'Release'; return;;
      debug)   echo 'Debug';   return;;
      *)       echo 'Debug';   return;;
    esac
  else
    echo 'Debug'
  fi
}

build::build() {
  local ok=0
  if ! echo "$*" | grep -q -- --no-release
  then
    mkdir -p "$OUT_DIR/release"

    # shellcheck disable=2116,2155
    local cmake_config_command=$(echo " \
      cmake \
      -Wno-dev \
      -S '$PWD/in' \
      -B '$OUT_DIR/release' \
      $(build::get_cmake_generator_opt_for_platform $PLATFORM) \
      $(build::get_cmake_system_name_opt_for_platform $PLATFORM) \
      -DCMAKE_EXPORT_COMPILE_COMMANDS=ON")

    # echo "$cmake_config_command"

    eval "$cmake_config_command"
    ok=$((ok + $?))

    cmake \
      --build "$OUT_DIR/release" \
      --config Release \
      -j8
    ok=$((ok + $?))
  fi

  if ! echo "$*" | grep -q -- --no-debug
  then
    for S in "${SANITIZERS[@]}"
    do
      mkdir -p "$OUT_DIR/debug/$S"

      # we need to use `tr` here because the bash on
      # some github runners reject the ${var^^} syntax

      # shellcheck disable=2116,2155
      local cmake_config_command=$(echo " \
        cmake \
        -Wno-dev \
        -S '$PWD/in' \
        -B '$OUT_DIR/debug/$S' \
        $(build::get_cmake_generator_opt_for_platform $PLATFORM) \
        $(build::get_cmake_system_name_opt_for_platform $PLATFORM) \
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
        -DUSE_$(echo $S | tr '[:lower:]' '[:upper:]')=ON")

      # echo "$cmake_config_command"

      eval "$cmake_config_command"
      ok=$((ok + $?))

      cmake \
        --build "$OUT_DIR/debug/$S" \
        --config Debug \
        -j8
      ok=$((ok + $?))
    done
  fi

  return $ok
}

build::init::cc \
  && build::build "$@" \
  && build::compdb

EC=$?
cd "$LAST_DIR" \
  || exit $?
exit $EC


