#! /usr/bin/env bash

# boilerplate
THIS="$(basename "$0")" # 'release'
LAST_DIR="$PWD"
cd "$(dirname "$0")/.."
THIS_BRANCH="$(git branch --show-current)"

# htor: human version to regular expression
release::htor() {
  case "$1" in
    maj|major)  local PART='\1';;
    min|minor)  local PART='\2';;
    mic|micro)  local PART='\3';;
    full)       local PART='\1.\2.\3';;
    *)          local PART='\1.\2.\3';;
  esac
  echo "$PART"
}

release::show() {
  local PART="$(release::htor "$1")"
  git tag --list \
    | sort -r \
    | head -n 1 \
    | sed -E "s|release/([0-9]+)\.([0-9]+)\.([0-9]+)|$PART|g"
}

release::show::part() {
  test $# -ne 1 && return 1
  local PART="$(release::htor "$1")"
  git tag --list \
    | sort -r \
    | head -n 1 \
    | sed -E "s|release/([0-9]+)\.([0-9]+)\.([0-9]+)|$PART|g"
}

release::show::advance() {
  test $# -ne 1 && return 1

  local MAJ=$(release::show::part maj)
  local MIN=$(release::show::part min)
  local MIC=$(release::show::part mic)

  case "$1" in
    maj|major)  echo "$((MAJ + 1)).$MIN.$MIC";;
    min|minor)  echo "$MAJ.$((MIN + 1)).$MIC";;
    mic|micro)  echo "$MAJ.$MIN.$((MIC + 1))";;
    *)          return 1;;
  esac
}

release::create() {
  local SEMVER="$1"
  if echo "$SEMVER" | grep -qE -- '^[0-9]+\.[0-9]+\.[0-9]+$'
  then
    test "$THIS_BRANCH" = 'release' \
      || git checkout release
    git merge next -m "release/$SEMVER" \
      && git push \
      && git tag \
        -a "release/$SEMVER" \
        -m "release/$SEMVER" \
        "$(git log | head -n 1 | sed -E 's/commit (.*)/\1/g')" \
      && git push origin "release/$SEMVER"
    return $?
  else
    return 1
  fi
}

release::help() {
echo "
  synopsis:
    $0 < --help | --create < version > | --show [ part | --advance part ] >

  example:
    $0 --help
    $0 --show
    $0 --show major
    $0 --show minor
    $0 --show micro
    $0 --create 1.2.3
    $0 --show --advance maj
    $0 --show --advance min
    $0 --show --advance mic

  ebnf form: 
    calling convention =
      '$0 ' argument

    argument =
        '--help'
      | '--create ' , version
      | '--show ' [ part | '--advance ' part ]

    part =
        'minor' | 'major' | 'micro'
      | 'maj'   | 'min'   | 'mic' ;

    positive integer =
      { '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' } ;

    version =
      positive integer , '.' , positive integer, '.' , positive integer ;
"
}

release() {
  if test $# -gt 0
  then
    local CMDB="$THIS"
    for ARG in "$@"; do
      case "$ARG" in
        # command
        --*)  CMDB+="::${ARG##--}";;
        # argument
        *)    CMDB+=" ${ARG}";;
      esac
    done
    ${CMDB[@]}
    return $?
  else
    return 1
  fi
}

release $@

# boilerplate
EXIT_VAL=$?
test $EXIT_VAL -gt 0 \
  && "$THIS::help"
cd "$LAST_DIR"
exit $EXIT_VAL
